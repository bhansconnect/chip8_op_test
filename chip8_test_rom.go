package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

// rom from https://github.com/corax89/chip8-test-rom/blob/master/test_opcode.ch8
var romData = []byte{
	0x12, 0x4e, 0xea, 0xac, 0xaa, 0xea, 0xce, 0xaa, 0xaa, 0xae, 0xe0, 0xa0, 0xa0, 0xe0, 0xc0, 0x40,
	0x40, 0xe0, 0xe0, 0x20, 0xc0, 0xe0, 0xe0, 0x60, 0x20, 0xe0, 0xa0, 0xe0, 0x20, 0x20, 0x60, 0x40,
	0x20, 0x40, 0xe0, 0x80, 0xe0, 0xe0, 0xe0, 0x20, 0x20, 0x20, 0xe0, 0xe0, 0xa0, 0xe0, 0xe0, 0xe0,
	0x20, 0xe0, 0x40, 0xa0, 0xe0, 0xa0, 0xe0, 0xc0, 0x80, 0xe0, 0xe0, 0x80, 0xc0, 0x80, 0xa0, 0x40,
	0xa0, 0xa0, 0xa2, 0x02, 0xda, 0xb4, 0x00, 0xee, 0xa2, 0x02, 0xda, 0xb4, 0x13, 0xdc, 0x68, 0x01,
	0x69, 0x05, 0x6a, 0x0a, 0x6b, 0x01, 0x65, 0x2a, 0x66, 0x2b, 0xa2, 0x16, 0xd8, 0xb4, 0xa2, 0x3e,
	0xd9, 0xb4, 0xa2, 0x02, 0x36, 0x2b, 0xa2, 0x06, 0xda, 0xb4, 0x6b, 0x06, 0xa2, 0x1a, 0xd8, 0xb4,
	0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x06, 0x45, 0x2a, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x0b, 0xa2, 0x1e,
	0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x06, 0x55, 0x60, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x10,
	0xa2, 0x26, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x06, 0x76, 0xff, 0x46, 0x2a, 0xa2, 0x02,
	0xda, 0xb4, 0x6b, 0x15, 0xa2, 0x2e, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x06, 0x95, 0x60,
	0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x1a, 0xa2, 0x32, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0x22, 0x42,
	0x68, 0x17, 0x69, 0x1b, 0x6a, 0x20, 0x6b, 0x01, 0xa2, 0x0a, 0xd8, 0xb4, 0xa2, 0x36, 0xd9, 0xb4,
	0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x06, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x0a, 0xd9, 0xb4, 0xa2, 0x06,
	0x87, 0x50, 0x47, 0x2a, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x0b, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x0e,
	0xd9, 0xb4, 0xa2, 0x06, 0x67, 0x2a, 0x87, 0xb1, 0x47, 0x2b, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x10,
	0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x12, 0xd9, 0xb4, 0xa2, 0x06, 0x66, 0x78, 0x67, 0x1f, 0x87, 0x62,
	0x47, 0x18, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x15, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x16, 0xd9, 0xb4,
	0xa2, 0x06, 0x66, 0x78, 0x67, 0x1f, 0x87, 0x63, 0x47, 0x67, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x1a,
	0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x1a, 0xd9, 0xb4, 0xa2, 0x06, 0x66, 0x8c, 0x67, 0x8c, 0x87, 0x64,
	0x47, 0x18, 0xa2, 0x02, 0xda, 0xb4, 0x68, 0x2c, 0x69, 0x30, 0x6a, 0x34, 0x6b, 0x01, 0xa2, 0x2a,
	0xd8, 0xb4, 0xa2, 0x1e, 0xd9, 0xb4, 0xa2, 0x06, 0x66, 0x8c, 0x67, 0x78, 0x87, 0x65, 0x47, 0xec,
	0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x06, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x22, 0xd9, 0xb4, 0xa2, 0x06,
	0x66, 0xe0, 0x86, 0x6e, 0x46, 0xc0, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x0b, 0xa2, 0x2a, 0xd8, 0xb4,
	0xa2, 0x36, 0xd9, 0xb4, 0xa2, 0x06, 0x66, 0x0f, 0x86, 0x66, 0x46, 0x07, 0xa2, 0x02, 0xda, 0xb4,
	0x6b, 0x10, 0xa2, 0x3a, 0xd8, 0xb4, 0xa2, 0x1e, 0xd9, 0xb4, 0xa3, 0xe8, 0x60, 0x00, 0x61, 0x30,
	0xf1, 0x55, 0xa3, 0xe9, 0xf0, 0x65, 0xa2, 0x06, 0x40, 0x30, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x15,
	0xa2, 0x3a, 0xd8, 0xb4, 0xa2, 0x16, 0xd9, 0xb4, 0xa3, 0xe8, 0x66, 0x89, 0xf6, 0x33, 0xf2, 0x65,
	0xa2, 0x02, 0x30, 0x01, 0xa2, 0x06, 0x31, 0x03, 0xa2, 0x06, 0x32, 0x07, 0xa2, 0x06, 0xda, 0xb4,
	0x6b, 0x1a, 0xa2, 0x0e, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0x12, 0x48, 0x13, 0xdc,
}

const WIDTH = 64
const HEIGHT = 32

const expected = `
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░███░█░█░░███░█░█░░░░░░███░███░░███░█░█░░░░░███░░██░███░█░█░░░░░
░░██░░█░░░█░█░██░░░░░░░█░█░██░░░█░█░██░░░░░░███░░█░░█░█░██░░░░░░
░░░█░█░█░░█░█░█░█░░░░░░█░█░█░░░░█░█░█░█░░░░░█░█░░░█░█░█░█░█░░░░░
░███░█░█░░███░█░█░░░░░░███░███░░███░█░█░░░░░███░░█░░███░█░█░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░█░█░█░█░░███░█░█░░░░░░███░███░░███░█░█░░░░░███░███░███░█░█░░░░░
░███░░█░░░█░█░██░░░░░░░███░█░█░░█░█░██░░░░░░███░█░░░█░█░██░░░░░░
░░░█░█░█░░█░█░█░█░░░░░░█░█░█░█░░█░█░█░█░░░░░█░█░███░█░█░█░█░░░░░
░░░█░█░█░░███░█░█░░░░░░███░███░░███░█░█░░░░░███░███░███░█░█░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░██░█░█░░███░█░█░░░░░░███░██░░░███░█░█░░░░░███░███░███░█░█░░░░░
░░█░░░█░░░█░█░██░░░░░░░███░░█░░░█░█░██░░░░░░███░██░░█░█░██░░░░░░
░░░█░█░█░░█░█░█░█░░░░░░█░█░░█░░░█░█░█░█░░░░░█░█░█░░░█░█░█░█░░░░░
░░█░░█░█░░███░█░█░░░░░░███░███░░███░█░█░░░░░███░███░███░█░█░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░███░█░█░░███░█░█░░░░░░███░███░░███░█░█░░░░░███░░██░███░█░█░░░░░
░░░█░░█░░░█░█░██░░░░░░░███░░░█░░█░█░██░░░░░░█░░░░█░░█░█░██░░░░░░
░░░█░█░█░░█░█░█░█░░░░░░█░█░██░░░█░█░█░█░░░░░██░░░░█░█░█░█░█░░░░░
░░░█░█░█░░███░█░█░░░░░░███░███░░███░█░█░░░░░█░░░░█░░███░█░█░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░███░█░█░░███░█░█░░░░░░███░███░░███░█░█░░░░░███░███░███░█░█░░░░░
░███░░█░░░█░█░██░░░░░░░███░░██░░█░█░██░░░░░░█░░░░██░█░█░██░░░░░░
░░░█░█░█░░█░█░█░█░░░░░░█░█░░░█░░█░█░█░█░░░░░██░░░░█░█░█░█░█░░░░░
░███░█░█░░███░█░█░░░░░░███░███░░███░█░█░░░░░█░░░███░███░█░█░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░█░░█░█░░███░█░█░░░░░░███░█░█░░███░█░█░░░░░██░░█░█░███░█░█░░░░░
░█░█░░█░░░█░█░██░░░░░░░███░███░░█░█░██░░░░░░░█░░░█░░█░█░██░░░░░░
░███░█░█░░█░█░█░█░░░░░░█░█░░░█░░█░█░█░█░░░░░░█░░█░█░█░█░█░█░░░░░
░█░█░█░█░░███░█░█░░░░░░███░░░█░░███░█░█░░░░░███░█░█░███░█░█░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
`

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func screenString(display []byte) string {
	var builder strings.Builder
	builder.WriteString("\n")
	for i := 0; i < HEIGHT; i++ {
		for j := 0; j < WIDTH; j++ {
			if display[i*WIDTH+j] != 0 {
				builder.WriteString("█")
			} else {
				builder.WriteString("░")
			}
		}
		builder.WriteString("\n")
	}
	return builder.String()
}

func testChip8(iter int) {
	var ram [4096]byte
	var display [WIDTH * HEIGHT]byte
	var regs [16]byte
	var stack [12]uint16
	sp := 0
	pc := 0x200
	lastPC := 0x0
	addressReg := 0x0

	// Just in case any program tries to optimize away code.
	ram[0x199] = byte(iter & 0xFF)

	// Load ROM at address 0x200
	copy(ram[0x200:], romData)

	for {
		if pc == lastPC {
			break
		}
		lastPC = pc
		opcode := (int(ram[pc]) << 8) | int(ram[pc+1])
		pc += 2

		// Match on the highest 4 bits
		switch opcode >> 12 {
		case 0x0:
			switch opcode {
			case 0x0E0:
				// Clearing the screen without new allocations.
				for i := 0; i < len(display); i++ {
					display[i] = 0
				}
			case 0x0EE:
				sp -= 1
				pc = int(stack[sp])
			default:
				panic(fmt.Sprintf("Opcode 0x%04X not implemented", opcode))
			}
		case 0x1:
			pc = opcode & 0x0FFF
		case 0x2:
			stack[sp] = uint16(pc)
			sp += 1
			pc = opcode & 0x0FFF
		case 0x3:
			x := regs[(opcode&0x0F00)>>8]
			if int(x) == (opcode & 0xFF) {
				pc += 2
			}
		case 0x4:
			x := regs[(opcode&0x0F00)>>8]
			if int(x) != (opcode & 0xFF) {
				pc += 2
			}
		case 0x5:
			x := regs[(opcode&0x0F00)>>8]
			y := regs[(opcode&0x00F0)>>4]
			if x == y {
				pc += 2
			}
		case 0x6:
			regs[(opcode&0x0F00)>>8] = byte(opcode & 0x00FF)
		case 0x7:
			regs[(opcode&0x0F00)>>8] = byte((int(regs[(opcode&0x0F00)>>8]) + (opcode & 0x00FF)) & 0xFF)
		case 0x8:
			x := (opcode & 0x0F00) >> 8
			y := (opcode & 0x00F0) >> 4
			switch opcode & 0x000F {
			case 0x0:
				regs[x] = regs[y]
			case 0x1:
				regs[x] |= regs[y]
			case 0x2:
				regs[x] &= regs[y]
			case 0x3:
				regs[x] ^= regs[y]
			case 0x4:
				out := int(regs[x]) + int(regs[y])
				if out > 0xFF {
					regs[0xF] = 1
				} else {
					regs[0xF] = 0
				}
				regs[x] = byte(out & 0xFF)
			case 0x5:
				out := int(regs[x]) - int(regs[y])
				if out >= 0 {
					regs[0xF] = 1
				} else {
					regs[0xF] = 0
				}
				regs[x] = byte(out & 0xFF)
			case 0x6:
				regs[0xF] = regs[y] & 0x01
				regs[x] = regs[y] >> 1
			case 0x7:
				out := int(regs[y]) - int(regs[x])
				if out >= 0 {
					regs[0xF] = 1
				} else {
					regs[0xF] = 0
				}
				regs[x] = byte(out & 0xFF)
			case 0xE:
				regs[0xF] = (regs[y] & 0x80) >> 7
				regs[x] = (regs[y] << 1) & 0xFF
			default:
				panic(fmt.Sprintf("Opcode 0x%04X not implemented", opcode))
			}
		case 0x9:
			x := regs[(opcode&0x0F00)>>8]
			y := regs[(opcode&0x00F0)>>4]
			if x != y {
				pc += 2
			}
		case 0xA:
			addressReg = opcode & 0x0FFF
		case 0xB:
			panic(fmt.Sprintf("Opcode 0x%04X not implemented", opcode))
		case 0xC:
			panic(fmt.Sprintf("Opcode 0x%04X not implemented", opcode))
		case 0xD:
			x := int(regs[(opcode&0x0F00)>>8]) % WIDTH
			y := int(regs[(opcode&0x00F0)>>4]) % HEIGHT
			n := opcode & 0x000F
			regs[0xF] = 0
			for i := y; i < min(y+n, HEIGHT); i++ {
				spriteByte := ram[addressReg+i-y]
				for j := x; j < min(x+8, WIDTH); j++ {
					bitIndex := j - x
					pixel := (spriteByte & (0x80 >> bitIndex)) >> (7 - bitIndex)
					offset := j + i*WIDTH
					regs[0xF] |= display[offset] & pixel
					display[offset] ^= pixel
				}
			}
		case 0xE:
			panic(fmt.Sprintf("Opcode 0x%04X not implemented", opcode))
		case 0xF:
			x := (opcode & 0x0F00) >> 8
			switch opcode & 0x00FF {
			case 0x33:
				rx := int(regs[x])
				hundreds := rx / 100
				rx -= hundreds * 100
				tens := rx / 10
				ones := rx - tens*10
				ram[addressReg] = byte(hundreds)
				ram[addressReg+1] = byte(tens)
				ram[addressReg+2] = byte(ones)
			case 0x55:
				for i := 0; i <= x; i++ {
					ram[addressReg+i] = regs[i]
				}
				addressReg += x + 1
			case 0x65:
				for i := 0; i <= x; i++ {
					regs[i] = ram[addressReg+i]
				}
				addressReg += x + 1
			default:
				panic(fmt.Sprintf("Opcode 0x%04X not implemented", opcode))
			}
		}
	}

	out := screenString(display[:])
	if out != expected {
		panic("Assertion failed: output does not match expected")
	}
}

func main() {
	iterations := 1
	if len(os.Args) > 1 {
		var err error
		iterations, err = strconv.Atoi(os.Args[1])
		if err != nil {
			fmt.Fprintf(os.Stderr, "Invalid iteration count: %v\n", err)
			os.Exit(1)
		}
	}

	for i := 0; i < iterations; i++ {
		testChip8(i)
	}
}
